name: Rym
scopeName: source.rym

patterns:
  - include: "#block-comments"
  - include: "#comments"
  - include: "#keywords"
  - include: "#punctuation"
  - include: "#strings"
  - include: "#chars"
  - include: "#constants"
  - include: "#function_declaration"
  - include: "#function_name"
  - include: "#ident"

repository:
  comments:
    patterns:
      - comment: documentation comments
        name: comment.line.documentation.rym
        match: ^\s*///.*
      - comment: line comments
        name: comment.line.double-slash.rym
        match: \s*//.*
  block-comments:
    patterns:
      - comment: empty block comments
        name: comment.block.rym
        match: /\*\*/
      - comment: block documentation comments
        name: comment.block.documentation.rym
        begin: /\*\*
        end: \*/
        patterns:
          - include: "#block-comments"
      - comment: block comments
        name: comment.block.rym
        begin: /\*(?!\*)
        end: \*/
        patterns:
          - include: "#block-comments"
  constants:
    patterns:
      - comment: decimal integers and floats
        name: constant.numeric.decimal.rym
        match: \b\d[\d_]*(\.?)[\d_]*(?:(E)([+-])([\d_]+))?(f\d+|i\d+|isize|u\d+|usize)?\b
        captures:
          "1":
            name: punctuation.separator.dot.decimal.rym
          "2":
            name: keyword.operator.exponent.rym
          "3":
            name: keyword.operator.exponent.sign.rym
          "4":
            name: constant.numeric.decimal.exponent.mantissa.rym
          "5":
            name: entity.name.type.numeric.rym
      - comment: booleans
        match: \b(True|False)\b
        name: constant.language.bool.rym keyword.other.rym
  function_declaration:
    patterns:
      - begin: \b(func|proc)\b
        beginCaptures:
          "1":
            name: storage.type.fn.rym keyword.other.rym
        end: (\{)|(?=\/\/|\n|\r)
        endCaptures:
          "1":
            name: punctuation.definition.block.begin.rym
        name: meta.function.signature.rym
        patterns:
          - include: "#function_declaration"
          - include: "#function_name"
  function_name:
    patterns:
      - match: ([_a-z][_a-zA-Z0-9]*)(?=\s*\()
        name: entity.name.function.rym
      - match: ([_a-z][_a-zA-Z0-9]*)\s*((?=<.*>\()|(?=\())
        captures:
          "1":
            name: entity.name.function.rym
          "2":
            name: keyword.operator.assignment.rym
  ident:
    patterns:
      - match: ([A-Z]|_+[A-Z])[_a-zA-Z0-9]*
        name: entity.name.rym
      - match: "[_a-z][_a-zA-Z0-9]*"
        name: variable.name
  keywords:
    patterns:
      - name: keyword.other.rym
        match: \b(func|proc|use|mod|pub|self|Self|as|move)\b
      - name: keyword.control keyword.other.rym
        match: \b(impl|trait|type)\b
      - comment: control flow keywords
        name: keyword.control.rym
        match: \b(loop|while|do|for|in|match|with|if|then|else|return|break|continue)\b
      - comment: storage keywords
        name: keyword.other.rym storage.type.rym
        match: \b(let|mut|const)\b
      - comment: logical operators
        name: keyword.operator.logical.rym
        match: (\||\|\||&|&&|<<|>>|!)(?!=)
      - comment: single equal
        name: keyword.operator.assignment.equal.rym
        match: (?<![<>])=(?!=|>)
      - comment: comparison operators
        name: keyword.operator.comparison.rym
        match: (=(=)?(?!>)|!=|<=|(?<!=)>=)
      - comment: math operators
        name: keyword.operator.math.rym
        match: "[+\\-*/%]=?"
      - comment: less than, greater than (special case)
        match: (?:\b|(?:(\))|(\])|(\})))[ \t]+([<>])[ \t]+(?:\b|(?:(\()|(\[)|(\{)))
        captures:
          "1":
            name: punctuation.brackets.round.rym
          "2":
            name: punctuation.brackets.square.rym
          "3":
            name: punctuation.brackets.curly.rym
          "4":
            name: keyword.operator.comparison.rym
          "5":
            name: punctuation.brackets.round.rym
          "6":
            name: punctuation.brackets.square.rym
          "7":
            name: punctuation.brackets.curly.rym
  punctuation:
    patterns:
      - comment: dot
        name: punctuation.dot.rym
        match: \.
      - comment: comma
        name: punctuation.comma.rym
        match: ","
      - comment: colon
        name: punctuation.colon.rym
        match: ":"
      - comment: semicolon
        name: punctuation.semi.rym
        match: ;
      - comment: at
        name: punctuation.at.rym
        match: "@"
      - comment: question mark
        name: punctuation.question.rym
        match: \?
      - comment: thin arrow
        name: punctuation.rym
        match: ->
      - comment: fat arrow
        name: punctuation.rym
        match: =>
      - comment: curly braces
        name: punctuation.brackets.curly.rym
        match: "[{}]"
      - comment: parentheses, round brackets
        name: punctuation.brackets.round.rym
        match: "[()]"
      - comment: square brackets
        name: punctuation.brackets.square.rym
        match: "[\\[\\]]"
      - comment: angle brackets
        name: punctuation.brackets.angle.rym
        match: (?<!=)[<>]
  strings:
    name: string.quoted.double.rym
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.rym
        match: \\.
  chars:
    name: string.quoted.single.rym
    begin: "'"
    end: "'"
    patterns:
      - name: constant.character.escape.rym
        match: \\.
