// struct Array[const len: usize, T] {
//     data: [len]T,
// }

type ArrayList = struct[T] {
    data: mut []T,
    length: usize,
    allocator: mut Allocator,
}

impl[T] ArrayList[T] {
    // From https://github.com/rust-lang/rust/blob/b9068315db4812abbbef317447e47e0c62d3652f/library/alloc/src/raw_vec.rs#L105C7-L116
    //
    // Tiny Vecs are dumb. Skip to:
    // - 8 if the element size is 1, because any heap allocators is likely
    //   to round up a request of less than 8 bytes to at least 8 bytes.
    // - 4 if elements are moderate-sized (<= 1 KiB).
    // - 1 otherwise, to avoid wasting too much space for very short Vecs.
    const MIN_NON_ZERO_CAP: usize = if @size_of(T) == 1 then
        8
    else if @size_of(T) <= 1024 then
        4
    else
        1;

    pub fn new(
        allocator: mut Allocator = mut DefaultAllocator,
        capacity = MIN_NON_ZERO_CAP
    ) Self | OutOfMemoryError {
        Self {
            data: allocator.alloc[T](capacity).try,
            lenth: 0,
            capacity,
        }
    }

    pub fn data(self: Self) []T {
        self.data
    }

    pub fn data_mut(self: mut Self) mut []T {
        mut self.data
    }

    pub fn length(self: Self) usize {
        self.length
    }

    pub fn capacity(self: Self) usize {
        self.data.length
    }

    pub fn clear(self: mut Self) {
        self.length = 0;
    }
}

// TODO finish ArrayList implementation

test "Instantiation" {
    let list = ArrayList[u8].new();
    assert_eq(list.length(), 0);
    assert_eq(list.capacity(), 10);
    assert_eq(@size_of(list.data()), 10 * 8);

    let list = ArrayList[u8].new(32);
    assert_eq(list.length(), 0);
    assert_eq(list.capacity(), 32);
    assert_eq(@size_of(list.data()), 32 * 8);
}
