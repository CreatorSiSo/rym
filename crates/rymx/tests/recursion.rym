fn main() void {
    test_fib("fib_if", fib_if);
    // test_fib("fib_match", fib_match);
    // test_fib("fib_oneliner", fib_oneliner);

    test_countdown();
}

fn fib_if(n) Uint
    if n <= 0 then 0
    else if n == 1 then 1
    else fib_if(n - 1) + fib_if(n - 2)

// const fib_match = fn(n) => match n with
//     | 0 => 0
//     | 1 => 1
//     | _ => fib_match(n - 1) + fib_match(n - 2);

// const fib_oneliner = fn(n) => match n with 0 => 0 | 1 => 1 | _ => fib_oneliner(n - 1) + fib_oneliner(n - 2);

fn test_fib(name, fib) void {
    assert_eq(fib(0), 0);
    assert_eq(fib(1), 1);
    assert_eq(fib(2), 1);
    assert_eq(fib(3), 2);
    assert_eq(fib(4), 3);
    assert_eq(fib(5), 5);
    assert_eq(fib(6), 8);
    assert_eq(fib(7), 13);
    assert_eq(fib(8), 21);
    assert_eq(fib(9), 34);
    assert_eq(fib(10), 55);
    assert_eq(fib(20), 6765);

    println("Successfully tested ", name, "!");
}

fn countdown(n, step) void {
    print(n, " ");
    if n > 0 then countdown(min(n - step, 0), step);
}

fn min(value, min) any
    if value < min then min else value

fn max(value, max) any
    if value > max then max else value

fn clamp(value, min, max) any
    if value < min then
        min
    else if value > max then
        max
    else
        value

fn test_countdown() void {
    countdown(0, 5);
    println();
    countdown(1, 1);
    println();
    countdown(10, 1);
    println();
    countdown(100, 8);
}
