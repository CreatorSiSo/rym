---
source: crates/rymx/tests/full.rs
expression: diag.outputs_dump() + &diag.reports_dump()
input_file: crates/rymx/tests/aoc/aoc_2023/day2.rym
---
--- tokenize ---
Const [const]
HSpace [ ]
Ident [std]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [import]
ParenOpen [(]
String [\"std\"]
ParenClose [)]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [fs]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [std]
Dot [.]
Ident [fs]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [fmt]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [std]
Dot [.]
Ident [fmt]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [List]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [std]
Dot [.]
Ident [List]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [dbg]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [std]
Dot [.]
Ident [debug]
Dot [.]
Ident [print]
Semi [;]
VSpace [\n\n]
Comment [// !void]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [main]
HSpace [ ]
Assign [=]
HSpace [ ]
Fn [fn]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Const [const]
HSpace [ ]
Ident [input]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [fs]
Dot [.]
Ident [read_to_string]
ParenOpen [(]
String [\"src/2023/day2.txt\"]
ParenClose [)]
Dot [.]
Ident [try]
Semi [;]
VSpace [\n]
HSpace [    ]
Const [const]
HSpace [ ]
Ident [games]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [parse_games]
ParenOpen [(]
Ident [input]
Dot [.]
Ident [items]
ParenClose [)]
Dot [.]
Ident [try]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [possible_games_sum]
Colon [:]
HSpace [ ]
Ident [u32]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Semi [;]
VSpace [\n]
HSpace [    ]
Const [const]
HSpace [ ]
Ident [max_step]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [Step]
HSpace [ ]
BraceOpen [{]
HSpace [ ]
Ident [red]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [12]
Comma [,]
HSpace [ ]
Ident [green]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [13]
Comma [,]
HSpace [ ]
Ident [blue]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [14]
HSpace [ ]
BraceClose [}]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Ident [outer]
Colon [:]
HSpace [ ]
For [for]
HSpace [ ]
ParenOpen [(]
Ident [game]
HSpace [ ]
Ident [in]
HSpace [ ]
Ident [games]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
For [for]
HSpace [ ]
ParenOpen [(]
Ident [step]
HSpace [ ]
Ident [in]
HSpace [ ]
Ident [game]
Dot [.]
Ident [steps]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [            ]
If [if]
HSpace [ ]
ParenOpen [(]
VSpace [\n]
HSpace [                ]
ParenOpen [(]
Ident [step]
Dot [.]
Ident [red]
HSpace [ ]
GreaterThan [>]
HSpace [ ]
Ident [max_step]
Dot [.]
Ident [red]
ParenClose [)]
VSpace [\n]
HSpace [                ]
Ident [or]
HSpace [ ]
ParenOpen [(]
Ident [step]
Dot [.]
Ident [green]
HSpace [ ]
GreaterThan [>]
HSpace [ ]
Ident [max_step]
Dot [.]
Ident [green]
ParenClose [)]
VSpace [\n]
HSpace [                ]
Ident [or]
HSpace [ ]
ParenOpen [(]
Ident [step]
Dot [.]
Ident [blue]
HSpace [ ]
GreaterThan [>]
HSpace [ ]
Ident [max_step]
Dot [.]
Ident [blue]
ParenClose [)]
VSpace [\n]
HSpace [            ]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [                ]
Ident [continue]
HSpace [ ]
Colon [:]
Ident [outer]
Semi [;]
VSpace [\n]
HSpace [            ]
BraceClose [}]
VSpace [\n]
HSpace [        ]
BraceClose [}]
VSpace [\n]
HSpace [        ]
Ident [possible_games_sum]
HSpace [ ]
Plus [+]
Assign [=]
HSpace [ ]
Ident [game]
Dot [.]
Ident [id]
Semi [;]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Ident [dbg]
ParenOpen [(]
String [\"Part 1: {}\\n\"]
Comma [,]
HSpace [ ]
BracketOpen [[]
Ident [possible_games_sum]
BracketClose []]
ParenClose [)]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [power_sum]
Colon [:]
HSpace [ ]
Ident [u32]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Semi [;]
VSpace [\n]
HSpace [    ]
For [for]
HSpace [ ]
ParenOpen [(]
Ident [game]
HSpace [ ]
Ident [in]
HSpace [ ]
Ident [games]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [min_step]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [Step]
HSpace [ ]
BraceOpen [{]
HSpace [ ]
Ident [red]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Comma [,]
HSpace [ ]
Ident [green]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Comma [,]
HSpace [ ]
Ident [blue]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
HSpace [ ]
BraceClose [}]
Semi [;]
VSpace [\n\n]
HSpace [        ]
For [for]
HSpace [ ]
ParenOpen [(]
Ident [step]
HSpace [ ]
Ident [in]
HSpace [ ]
Ident [game]
Dot [.]
Ident [steps]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [            ]
Comment [// TODO turn max back into @max]
VSpace [\n]
HSpace [            ]
Ident [min_step]
Dot [.]
Ident [red]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [max]
ParenOpen [(]
Ident [min_step]
Dot [.]
Ident [red]
Comma [,]
HSpace [ ]
Ident [step]
Dot [.]
Ident [red]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [            ]
Ident [min_step]
Dot [.]
Ident [green]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [max]
ParenOpen [(]
Ident [min_step]
Dot [.]
Ident [green]
Comma [,]
HSpace [ ]
Ident [step]
Dot [.]
Ident [green]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [            ]
Ident [min_step]
Dot [.]
Ident [blue]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [max]
ParenOpen [(]
Ident [min_step]
Dot [.]
Ident [blue]
Comma [,]
HSpace [ ]
Ident [step]
Dot [.]
Ident [blue]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [        ]
BraceClose [}]
VSpace [\n\n]
HSpace [        ]
Ident [power_sum]
HSpace [ ]
Plus [+]
Assign [=]
HSpace [ ]
Ident [min_step]
Dot [.]
Ident [red]
HSpace [ ]
Star [*]
HSpace [ ]
Ident [min_step]
Dot [.]
Ident [blue]
HSpace [ ]
Star [*]
HSpace [ ]
Ident [min_step]
Dot [.]
Ident [green]
Semi [;]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Ident [dbg]
ParenOpen [(]
String [\"Part 2: {}\\n\"]
Comma [,]
HSpace [ ]
BracketOpen [[]
Ident [power_sum]
BracketClose []]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
Semi [;]
VSpace [\n\n]
Comment [// !List(Game)]
VSpace [\n]
Fn [fn]
HSpace [ ]
Ident [parse_games]
ParenOpen [(]
Ident [input]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [u8]
Semi [;]
HSpace [ ]
Ident [_]
BracketClose []]
ParenClose [)]
HSpace [ ]
Ident [List]
ParenOpen [(]
Ident [Game]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [games]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [List]
ParenOpen [(]
Ident [Game]
ParenClose [)]
Dot [.]
Ident [init]
ParenOpen [(]
Ident [gpa]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [lines]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [input]
Dot [.]
Ident [split]
ParenOpen [(]
String [\"\\n\"]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [while]
HSpace [ ]
ParenOpen [(]
Ident [lines]
Dot [.]
Ident [next]
ParenOpen [(]
ParenClose [)]
ParenClose [)]
HSpace [ ]
Pipe [|]
Ident [line]
Pipe [|]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
If [if]
HSpace [ ]
ParenOpen [(]
Ident [line]
Dot [.]
Ident [len]
HSpace [ ]
Eq [==]
HSpace [ ]
Int [0]
ParenClose [)]
HSpace [ ]
Ident [continue]
Semi [;]
VSpace [\n]
HSpace [        ]
Ident [try]
HSpace [ ]
Ident [games]
Dot [.]
Ident [append]
ParenOpen [(]
Ident [try]
HSpace [ ]
Ident [Game]
Dot [.]
Ident [from_str]
ParenOpen [(]
Ident [gpa]
Comma [,]
HSpace [ ]
Ident [line]
ParenClose [)]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n]
HSpace [    ]
Return [return]
HSpace [ ]
Ident [games]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [Game]
HSpace [ ]
Assign [=]
HSpace [ ]
Struct [struct]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [id]
Colon [:]
HSpace [ ]
Ident [u32]
Comma [,]
VSpace [\n]
HSpace [    ]
Ident [steps]
Colon [:]
HSpace [ ]
Ident [List]
ParenOpen [(]
Ident [Step]
ParenClose [)]
Comma [,]
VSpace [\n\n]
HSpace [    ]
Const [const]
HSpace [ ]
Ident [ParseGameError]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [error]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Ident [InvalidFormat]
Comma [,]
VSpace [\n]
HSpace [        ]
Ident [Overflow]
Comma [,]
VSpace [\n]
HSpace [        ]
Ident [InvalidCharacter]
Comma [,]
VSpace [\n]
HSpace [        ]
Ident [OutOfMemory]
Comma [,]
VSpace [\n]
HSpace [    ]
BraceClose [}]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Comment [// ParseGameError!Game]
VSpace [\n]
HSpace [    ]
Fn [fn]
HSpace [ ]
Ident [from_str]
ParenOpen [(]
Ident [str]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [u8]
Semi [;]
HSpace [ ]
Ident [_]
BracketClose []]
ParenClose [)]
HSpace [ ]
Ident [Game]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Let [let]
HSpace [ ]
Ident [Some]
ParenOpen [(]
Ident [colon_pos]
ParenClose [)]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [str]
Dot [.]
Ident [index_of]
ParenOpen [(]
String [\":\"]
ParenClose [)]
HSpace [ ]
Else [else]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [            ]
Return [return]
HSpace [ ]
Ident [ParseGameError]
Dot [.]
Ident [InvalidFormat]
Semi [;]
VSpace [\n]
HSpace [        ]
BraceClose [}]
Semi [;]
VSpace [\n]
HSpace [        ]
Let [let]
HSpace [ ]
Ident [id]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [fmt]
Dot [.]
Ident [parseInt]
ParenOpen [(]
Ident [u32]
Comma [,]
HSpace [ ]
Ident [str]
BracketOpen [[]
Int [5]
DotDot [..]
Ident [colon_pos]
BracketClose []]
Comma [,]
HSpace [ ]
Int [10]
ParenClose [)]
Dot [.]
Ident [try]
Semi [;]
VSpace [\n\n]
HSpace [        ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [game]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [Game]
Dot [.]
Ident [new]
ParenOpen [(]
Ident [id]
ParenClose [)]
Dot [.]
Ident [try]
Semi [;]
VSpace [\n\n]
HSpace [        ]
Let [let]
HSpace [ ]
Ident [steps_str]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [str]
BracketOpen [[]
Ident [colon_pos]
HSpace [ ]
Plus [+]
HSpace [ ]
Int [1]
HSpace [ ]
DotDot [..]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [        ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [steps]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [steps_str]
Dot [.]
Ident [split]
ParenOpen [(]
String [\";\"]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [        ]
Ident [while]
HSpace [ ]
ParenOpen [(]
Ident [steps]
Dot [.]
Ident [next]
ParenOpen [(]
ParenClose [)]
ParenClose [)]
HSpace [ ]
Pipe [|]
Ident [step_str]
Pipe [|]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [            ]
Ident [game]
Dot [.]
Ident [steps]
Dot [.]
Ident [append]
ParenOpen [(]
Ident [Step]
Dot [.]
Ident [from_str]
ParenOpen [(]
Ident [step_str]
ParenClose [)]
Dot [.]
Ident [try]
ParenClose [)]
Dot [.]
Ident [try]
Semi [;]
VSpace [\n]
HSpace [        ]
BraceClose [}]
VSpace [\n\n]
HSpace [        ]
Return [return]
HSpace [ ]
Ident [game]
Semi [;]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Comment [// error{OutOfMemory}!Game]
VSpace [\n]
HSpace [    ]
Fn [fn]
HSpace [ ]
Ident [new]
ParenOpen [(]
Ident [id]
Colon [:]
HSpace [ ]
Ident [u32]
ParenClose [)]
HSpace [ ]
Ident [Game]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Return [return]
HSpace [ ]
Ident [Game]
HSpace [ ]
BraceOpen [{]
HSpace [ ]
Ident [id]
Comma [,]
HSpace [ ]
Ident [steps]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [List]
ParenOpen [(]
Ident [Step]
ParenClose [)]
Dot [.]
Ident [new]
ParenOpen [(]
ParenClose [)]
Dot [.]
Ident [try]
HSpace [ ]
BraceClose [}]
Semi [;]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n]
BraceClose [}]
Semi [;]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [Step]
HSpace [ ]
Assign [=]
HSpace [ ]
Struct [struct]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [red]
Colon [:]
HSpace [ ]
Ident [u32]
Comma [,]
VSpace [\n]
HSpace [    ]
Ident [green]
Colon [:]
HSpace [ ]
Ident [u32]
Comma [,]
VSpace [\n]
HSpace [    ]
Ident [blue]
Colon [:]
HSpace [ ]
Ident [u32]
Comma [,]
VSpace [\n\n]
HSpace [    ]
DocComment [/// Parse a Step from a string with format]
VSpace [\n]
HSpace [    ]
DocComment [///]
VSpace [\n]
HSpace [    ]
DocComment [/// ```]
VSpace [\n]
HSpace [    ]
DocComment [/// step ::= cube (\",\" cube)*]
VSpace [\n]
HSpace [    ]
DocComment [/// cube ::= \" \" int \" \" (\"red\" | \"green\" | \"blue\")]
VSpace [\n]
HSpace [    ]
DocComment [/// ```]
VSpace [\n]
HSpace [    ]
Comment [// fmt.ParseIntError!Step]
VSpace [\n]
HSpace [    ]
Fn [fn]
HSpace [ ]
Ident [from_str]
ParenOpen [(]
Ident [str]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [u8]
BracketClose []]
ParenClose [)]
HSpace [ ]
Ident [Step]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [step]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [Step]
HSpace [ ]
BraceOpen [{]
HSpace [ ]
Ident [red]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Comma [,]
HSpace [ ]
Ident [green]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Comma [,]
HSpace [ ]
Ident [blue]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
HSpace [ ]
BraceClose [}]
Semi [;]
VSpace [\n\n]
HSpace [        ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [cubes]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [str]
Dot [.]
Ident [split]
ParenOpen [(]
String [\",\"]
ParenClose [)]
Dot [.]
Ident [map]
ParenOpen [(]
Fn [fn]
ParenOpen [(]
Ident [padded_str]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [            ]
Comment [// Discard leading space]
VSpace [\n]
HSpace [            ]
Let [let]
HSpace [ ]
Ident [cube_str]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [padded_str]
BracketOpen [[]
Int [1]
DotDot [..]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [            ]
Let [let]
HSpace [ ]
Ident [Some]
ParenOpen [(]
Ident [space_pos]
ParenClose [)]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [cube_str]
Dot [.]
Ident [index_of]
ParenOpen [(]
String [\" \"]
ParenClose [)]
HSpace [ ]
Else [else]
HSpace [ ]
Ident [continue]
Semi [;]
VSpace [\n\n]
HSpace [            ]
Let [let]
HSpace [ ]
Ident [name]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [cube_str]
BracketOpen [[]
ParenOpen [(]
Ident [space_pos]
HSpace [ ]
Plus [+]
HSpace [ ]
Int [1]
ParenClose [)]
DotDot [..]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [            ]
Let [let]
HSpace [ ]
Ident [amount]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [fmt]
Dot [.]
Ident [parseInt]
ParenOpen [(]
Ident [u32]
Comma [,]
HSpace [ ]
Ident [cube_str]
BracketOpen [[]
Int [0]
DotDot [..]
Ident [space_pos]
BracketClose []]
Comma [,]
HSpace [ ]
Int [10]
ParenClose [)]
Dot [.]
Ident [try]
Semi [;]
VSpace [\n\n]
HSpace [            ]
Ident [match]
HSpace [ ]
ParenOpen [(]
Ident [name]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [                ]
String [\"red\"]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [step]
Dot [.]
Ident [red]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [amount]
Comma [,]
VSpace [\n]
HSpace [                ]
String [\"green\"]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [step]
Dot [.]
Ident [green]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [amount]
Comma [,]
VSpace [\n]
HSpace [                ]
String [\"blue\"]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [step]
Dot [.]
Ident [blue]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [amount]
Comma [,]
VSpace [\n]
HSpace [                ]
Else [else]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [dbg]
ParenOpen [(]
String [\"Invalid cube name \\\"{s}\\\"\"]
Comma [,]
HSpace [ ]
BracketOpen [[]
Ident [name]
BracketClose []]
ParenClose [)]
Comma [,]
VSpace [\n]
HSpace [            ]
BraceClose [}]
VSpace [\n]
HSpace [        ]
BraceClose [}]
ParenClose [)]
Semi [;]
VSpace [\n\n\n]
HSpace [        ]
Return [return]
HSpace [ ]
Ident [step]
Semi [;]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n]
BraceClose [}]
Semi [;]
VSpace [\n]

--- parse ---

--- reports ---
Error: Syntax Error
    ╭─[/home/simon/dev/rym/crates/rymx/tests/aoc/aoc_2023/day2.rym:13:27]
    │
 13 │     const max_step = Step { red = 12, green = 13, blue = 14 };
    │                           ┬  
    │                           ╰── Expected nothing, found `{`.
────╯

