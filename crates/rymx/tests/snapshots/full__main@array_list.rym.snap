---
source: crates/rymx/tests/full.rs
expression: "String::from_utf8(out).unwrap()"
input_file: crates/rymx/tests/array_list.rym
---
Debug: Finished tokenizing
Comment [// struct Array[const len: usize, T] {]
VSpace [\n]
Comment [//     data: [len]T,]
VSpace [\n]
Comment [// }]
VSpace [\n\n]
Type [type]
HSpace [ ]
Ident [ArrayList]
HSpace [ ]
Assign [=]
HSpace [ ]
Struct [struct]
BracketOpen [[]
Ident [T]
BracketClose []]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [data]
Colon [:]
HSpace [ ]
Mut [mut]
HSpace [ ]
BracketOpen [[]
BracketClose []]
Ident [T]
Comma [,]
VSpace [\n]
HSpace [    ]
Ident [length]
Colon [:]
HSpace [ ]
Ident [usize]
Comma [,]
VSpace [\n]
HSpace [    ]
Ident [allocator]
Colon [:]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [Allocator]
Comma [,]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Impl [impl]
BracketOpen [[]
Ident [T]
BracketClose []]
HSpace [ ]
Ident [ArrayList]
BracketOpen [[]
Ident [T]
BracketClose []]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Comment [// From https://github.com/rust-lang/rust/blob/b9068315db4812abbbef317447e47e0c62d3652f/library/alloc/src/raw_vec.rs#L105C7-L116]
VSpace [\n]
HSpace [    ]
Comment [//]
VSpace [\n]
HSpace [    ]
Comment [// Tiny Vecs are dumb. Skip to:]
VSpace [\n]
HSpace [    ]
Comment [// - 8 if the element size is 1, because any heap allocators is likely]
VSpace [\n]
HSpace [    ]
Comment [//   to round up a request of less than 8 bytes to at least 8 bytes.]
VSpace [\n]
HSpace [    ]
Comment [// - 4 if elements are moderate-sized (<= 1 KiB).]
VSpace [\n]
HSpace [    ]
Comment [// - 1 otherwise, to avoid wasting too much space for very short Vecs.]
VSpace [\n]
HSpace [    ]
Const [const]
HSpace [ ]
Ident [MIN_NON_ZERO_CAP]
Colon [:]
HSpace [ ]
Ident [usize]
HSpace [ ]
Assign [=]
HSpace [ ]
If [if]
HSpace [ ]
Error [@]
Ident [size_of]
ParenOpen [(]
Ident [T]
ParenClose [)]
HSpace [ ]
Eq [==]
HSpace [ ]
Int [1]
HSpace [ ]
Then [then]
VSpace [\n]
HSpace [        ]
Int [8]
VSpace [\n]
HSpace [    ]
Else [else]
HSpace [ ]
If [if]
HSpace [ ]
Error [@]
Ident [size_of]
ParenOpen [(]
Ident [T]
ParenClose [)]
HSpace [ ]
LessThanEq [<=]
HSpace [ ]
Int [1024]
HSpace [ ]
Then [then]
VSpace [\n]
HSpace [        ]
Int [4]
VSpace [\n]
HSpace [    ]
Else [else]
VSpace [\n]
HSpace [        ]
Int [1]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Ident [pub]
HSpace [ ]
Fn [fn]
HSpace [ ]
Ident [new]
ParenOpen [(]
VSpace [\n]
HSpace [        ]
Ident [allocator]
Colon [:]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [Allocator]
HSpace [ ]
Assign [=]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [DefaultAllocator]
Comma [,]
VSpace [\n]
HSpace [        ]
Ident [capacity]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [MIN_NON_ZERO_CAP]
VSpace [\n]
HSpace [    ]
ParenClose [)]
HSpace [ ]
Ident [Self]
HSpace [ ]
Pipe [|]
HSpace [ ]
Ident [OutOfMemoryError]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Ident [Self]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [            ]
Ident [data]
Colon [:]
HSpace [ ]
Ident [allocator]
Dot [.]
Ident [alloc]
BracketOpen [[]
Ident [T]
BracketClose []]
ParenOpen [(]
Ident [capacity]
ParenClose [)]
Dot [.]
Ident [try]
Comma [,]
VSpace [\n]
HSpace [            ]
Ident [lenth]
Colon [:]
HSpace [ ]
Int [0]
Comma [,]
VSpace [\n]
HSpace [            ]
Ident [capacity]
Comma [,]
VSpace [\n]
HSpace [        ]
BraceClose [}]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Ident [pub]
HSpace [ ]
Fn [fn]
HSpace [ ]
Ident [data]
ParenOpen [(]
Ident [self]
Colon [:]
HSpace [ ]
Ident [Self]
ParenClose [)]
HSpace [ ]
BracketOpen [[]
BracketClose []]
Ident [T]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Ident [self]
Dot [.]
Ident [data]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Ident [pub]
HSpace [ ]
Fn [fn]
HSpace [ ]
Ident [data_mut]
ParenOpen [(]
Ident [self]
Colon [:]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [Self]
ParenClose [)]
HSpace [ ]
Mut [mut]
HSpace [ ]
BracketOpen [[]
BracketClose []]
Ident [T]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Mut [mut]
HSpace [ ]
Ident [self]
Dot [.]
Ident [data]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Ident [pub]
HSpace [ ]
Fn [fn]
HSpace [ ]
Ident [length]
ParenOpen [(]
Ident [self]
Colon [:]
HSpace [ ]
Ident [Self]
ParenClose [)]
HSpace [ ]
Ident [usize]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Ident [self]
Dot [.]
Ident [length]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Ident [pub]
HSpace [ ]
Fn [fn]
HSpace [ ]
Ident [capacity]
ParenOpen [(]
Ident [self]
Colon [:]
HSpace [ ]
Ident [Self]
ParenClose [)]
HSpace [ ]
Ident [usize]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Ident [self]
Dot [.]
Ident [data]
Dot [.]
Ident [length]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Ident [pub]
HSpace [ ]
Fn [fn]
HSpace [ ]
Ident [clear]
ParenOpen [(]
Ident [self]
Colon [:]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [Self]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
Ident [self]
Dot [.]
Ident [length]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Semi [;]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Comment [// TODO finish ArrayList implementation]
VSpace [\n\n]
Ident [test]
HSpace [ ]
String [\"Instantiation\"]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Let [let]
HSpace [ ]
Ident [list]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [ArrayList]
BracketOpen [[]
Ident [u8]
BracketClose []]
Dot [.]
Ident [new]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [list]
Dot [.]
Ident [length]
ParenOpen [(]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [list]
Dot [.]
Ident [capacity]
ParenOpen [(]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [10]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Error [@]
Ident [size_of]
ParenOpen [(]
Ident [list]
Dot [.]
Ident [data]
ParenOpen [(]
ParenClose [)]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [10]
HSpace [ ]
Star [*]
HSpace [ ]
Int [8]
ParenClose [)]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Let [let]
HSpace [ ]
Ident [list]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [ArrayList]
BracketOpen [[]
Ident [u8]
BracketClose []]
Dot [.]
Ident [new]
ParenOpen [(]
Int [32]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [list]
Dot [.]
Ident [length]
ParenOpen [(]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [list]
Dot [.]
Ident [capacity]
ParenOpen [(]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [32]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Error [@]
Ident [size_of]
ParenOpen [(]
Ident [list]
Dot [.]
Ident [data]
ParenOpen [(]
ParenClose [)]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [32]
HSpace [ ]
Star [*]
HSpace [ ]
Int [8]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n]

Error: Invalid character `@`
    ╭─[/home/simon/dev/rym/crates/rymx/tests/array_list.rym:19:40]
    │
 19 │     const MIN_NON_ZERO_CAP: usize = if @size_of(T) == 1 then
    │                                        ┬  
    │                                        ╰── Invalid character `@`
────╯

Error: Invalid character `@`
    ╭─[/home/simon/dev/rym/crates/rymx/tests/array_list.rym:21:13]
    │
 21 │     else if @size_of(T) <= 1024 then
    │             ┬  
    │             ╰── Invalid character `@`
────╯

Error: Invalid character `@`
    ╭─[/home/simon/dev/rym/crates/rymx/tests/array_list.rym:64:15]
    │
 64 │     assert_eq(@size_of(list.data()), 10 * 8);
    │               ┬  
    │               ╰── Invalid character `@`
────╯

Error: Invalid character `@`
    ╭─[/home/simon/dev/rym/crates/rymx/tests/array_list.rym:69:15]
    │
 69 │     assert_eq(@size_of(list.data()), 32 * 8);
    │               ┬  
    │               ╰── Invalid character `@`
────╯

Error: Expected type, found `[`
   ╭─[/home/simon/dev/rym/crates/rymx/tests/array_list.rym:5:24]
   │
 5 │ type ArrayList = struct[T] {
   │                        ┬  
   │                        ╰── Expected type
───╯

Debug: Finished parsing
None


