---
source: crates/rymx/tests/full.rs
expression: diag.outputs_dump() + &diag.reports_dump()
input_file: crates/rymx/tests/compare.rym
---
--- tokenize ---
Const [const]
HSpace [ ]
Ident [print_eq_print_0]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [print]
HSpace [ ]
Eq [==]
HSpace [ ]
Ident [print]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [print_eq_print_1]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [print]
HSpace [ ]
Eq [==]
HSpace [ ]
ParenOpen [(]
Fn [fn]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
Ident [print]
ParenClose [)]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [print_eq_print_2]
HSpace [ ]
Assign [=]
HSpace [ ]
Ident [print]
HSpace [ ]
Eq [==]
HSpace [ ]
ParenOpen [(]
Fn [fn]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
Ident [print]
ParenClose [)]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]

--- parse ---
Module {
    name: "",
    constants: [
        (
            "print_eq_print_0",
            Eq(
                Ident("print"),
                Ident("print"),
            ),
        ),
        (
            "print_eq_print_1",
            Eq(
                Ident("print"),
                Function {
                    params: [],
                    body: Ident("print"),
                },
            ),
        ),
        (
            "print_eq_print_2",
            Eq(
                Ident("print"),
                Call(
                    Function {
                        params: [],
                        body: Ident("print"),
                    },
                    [],
                ),
            ),
        ),
    ],
    children: [],
}

--- interpret ---
const assert = fn<native> (1)
const assert_eq = fn<native> (2)
const fib_native = fn<native> (1)
const print = fn<native> (variadic)
const print_eq_print_0 = true
const print_eq_print_1 = false
const print_eq_print_2 = true
const println = fn<native> (variadic)

--- reports ---

