---
source: crates/rymx/tests/full.rs
expression: diag.outputs_dump() + &diag.reports_dump()
input_file: crates/rymx/tests/mini/fizzbuzz.rym
---
--- tokenize ---
Fn [fn]
HSpace [ ]
Ident [main]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [\t]
ParenOpen [(]
Int [1]
DotDot [..]
ParenClose [)]
Dot [.]
Ident [iter]
ParenOpen [(]
ParenClose [)]
Dot [.]
Ident [for_each]
ParenOpen [(]
Fn [fn]
ParenOpen [(]
Ident [i]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [println]
ParenOpen [(]
Ident [match]
HSpace [ ]
Ident [i]
HSpace [ ]
Ident [with]
VSpace [\n]
HSpace [\t\t]
Pipe [|]
HSpace [ ]
Ident [_]
HSpace [ ]
If [if]
HSpace [ ]
Ident [i]
HSpace [ ]
Percent [%]
HSpace [ ]
Int [3]
HSpace [ ]
Eq [==]
HSpace [ ]
Int [0]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
String [\"Fizz\"]
Comma [,]
VSpace [\n]
HSpace [\t\t]
Pipe [|]
HSpace [ ]
Ident [_]
HSpace [ ]
If [if]
HSpace [ ]
Ident [i]
HSpace [ ]
Percent [%]
HSpace [ ]
Int [5]
HSpace [ ]
Eq [==]
HSpace [ ]
Int [0]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
String [\"Buzz\"]
Comma [,]
VSpace [\n]
HSpace [\t\t]
Pipe [|]
HSpace [ ]
Ident [_]
HSpace [ ]
If [if]
HSpace [ ]
Ident [i]
HSpace [ ]
Percent [%]
HSpace [ ]
Int [15]
HSpace [ ]
Eq [==]
HSpace [ ]
Int [0]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
String [\"FizzBuzz\"]
Comma [,]
VSpace [\n]
HSpace [\t\t]
Pipe [|]
HSpace [ ]
Ident [_]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [i]
Dot [.]
Ident [to_string]
ParenOpen [(]
ParenClose [)]
Comma [,]
VSpace [\n]
HSpace [\t]
ParenClose [)]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n]

--- parse ---

--- reports ---
Error: 
   ╭─[/home/simon/dev/rym/crates/rymx/tests/mini/fizzbuzz.rym:2:4]
   │
 2 │     (1..).iter().for_each(fn(i) => println(match i with
   │       ─┬  
   │        ╰── ExpectedFound { expected: [], found: Some(DotDot) }
───╯

