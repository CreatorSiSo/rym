---
source: crates/rymx/tests/full.rs
expression: "String::from_utf8(out).unwrap()"
input_file: crates/rymx/tests/recursion.rym
---
Debug: Finished tokenizing
Fn [fn]
HSpace [ ]
Ident [main]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [test_fib]
ParenOpen [(]
String [\"fib_if\"]
Comma [,]
HSpace [ ]
Ident [fib_if]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Comment [// test_fib(\"fib_match\", fib_match);]
VSpace [\n]
HSpace [    ]
Comment [// test_fib(\"fib_oneliner\", fib_oneliner);]
VSpace [\n]
HSpace [    ]
Ident [test_countdown]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [test_fake_loops]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [fib_if]
ParenOpen [(]
Ident [n]
Colon [:]
HSpace [ ]
Ident [Int]
ParenClose [)]
HSpace [ ]
Ident [Uint]
HSpace [ ]
ThickArrow [=>]
VSpace [\n]
HSpace [    ]
If [if]
HSpace [ ]
Ident [n]
HSpace [ ]
LessThanEq [<=]
HSpace [ ]
Int [0]
HSpace [ ]
Then [then]
HSpace [ ]
Int [0]
VSpace [\n]
HSpace [    ]
Else [else]
HSpace [ ]
If [if]
HSpace [ ]
Ident [n]
HSpace [ ]
Eq [==]
HSpace [ ]
Int [1]
HSpace [ ]
Then [then]
HSpace [ ]
Int [1]
VSpace [\n]
HSpace [    ]
Else [else]
HSpace [ ]
Ident [fib_if]
ParenOpen [(]
Ident [n]
HSpace [ ]
Minus [-]
HSpace [ ]
Int [1]
ParenClose [)]
HSpace [ ]
Plus [+]
HSpace [ ]
Ident [fib_if]
ParenOpen [(]
Ident [n]
HSpace [ ]
Minus [-]
HSpace [ ]
Int [2]
ParenClose [)]
Semi [;]
VSpace [\n\n]
Comment [// const fib_match = fn(n) => match n with]
VSpace [\n]
Comment [//     | 0 => 0]
VSpace [\n]
Comment [//     | 1 => 1]
VSpace [\n]
Comment [//     | _ => fib_match(n - 1) + fib_match(n - 2);]
VSpace [\n\n]
Comment [// const fib_oneliner = fn(n) => match n with 0 => 0 | 1 => 1 | _ => fib_oneliner(n - 1) + fib_oneliner(n - 2);]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [test_fib]
ParenOpen [(]
Ident [name]
Comma [,]
HSpace [ ]
Ident [fib]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [0]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [1]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [2]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [3]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [2]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [4]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [3]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [5]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [5]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [6]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [8]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [7]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [13]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [8]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [21]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [9]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [34]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [10]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [55]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [20]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [6765]
ParenClose [)]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Ident [println]
ParenOpen [(]
String [\"Successfully tested \"]
Comma [,]
HSpace [ ]
Ident [name]
Comma [,]
HSpace [ ]
String [\"!\"]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [countdown]
ParenOpen [(]
Ident [n]
Comma [,]
HSpace [ ]
Ident [step]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [print]
ParenOpen [(]
Ident [n]
Comma [,]
HSpace [ ]
String [\" \"]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
If [if]
HSpace [ ]
Ident [n]
HSpace [ ]
GreaterThan [>]
HSpace [ ]
Int [0]
HSpace [ ]
Then [then]
HSpace [ ]
Ident [countdown]
ParenOpen [(]
Ident [min]
ParenOpen [(]
Ident [n]
HSpace [ ]
Minus [-]
HSpace [ ]
Ident [step]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Comma [,]
HSpace [ ]
Ident [step]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [test_countdown]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [countdown]
ParenOpen [(]
Int [0]
Comma [,]
HSpace [ ]
Int [5]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [println]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [countdown]
ParenOpen [(]
Int [1]
Comma [,]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [println]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [countdown]
ParenOpen [(]
Int [10]
Comma [,]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [println]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [countdown]
ParenOpen [(]
Int [100]
Comma [,]
HSpace [ ]
Int [8]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [println]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [test_fake_loops]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Fn [fn]
HSpace [ ]
Ident [while_do]
ParenOpen [(]
Ident [i]
Colon [:]
HSpace [ ]
Ident [Int]
Comma [,]
HSpace [ ]
Ident [increment]
Comma [,]
HSpace [ ]
Ident [condition]
Comma [,]
HSpace [ ]
Ident [body]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [        ]
If [if]
HSpace [ ]
Not [not]
HSpace [ ]
Ident [condition]
ParenOpen [(]
Ident [i]
ParenClose [)]
HSpace [ ]
Then [then]
HSpace [ ]
Return [return]
Semi [;]
VSpace [\n]
HSpace [        ]
Ident [body]
ParenOpen [(]
Ident [i]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [        ]
Ident [while_do]
ParenOpen [(]
Ident [increment]
ParenOpen [(]
Ident [i]
ParenClose [)]
Comma [,]
HSpace [ ]
Ident [increment]
Comma [,]
HSpace [ ]
Ident [condition]
Comma [,]
HSpace [ ]
Ident [body]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
BraceClose [}]
VSpace [\n\n]
HSpace [    ]
Ident [while_do]
ParenOpen [(]
VSpace [\n]
HSpace [        ]
Int [0]
Comma [,]
VSpace [\n]
HSpace [        ]
Fn [fn]
ParenOpen [(]
Ident [i]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [i]
HSpace [ ]
Plus [+]
HSpace [ ]
Int [2]
Comma [,]
VSpace [\n]
HSpace [        ]
Fn [fn]
ParenOpen [(]
Ident [i]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [i]
HSpace [ ]
LessThan [<]
HSpace [ ]
Int [10]
Comma [,]
VSpace [\n]
HSpace [        ]
Fn [fn]
ParenOpen [(]
Ident [i]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [println]
ParenOpen [(]
String [\"i = \"]
Comma [,]
HSpace [ ]
Ident [i]
ParenClose [)]
VSpace [\n]
HSpace [    ]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [outer]
ParenOpen [(]
Ident [n]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Fn [fn]
HSpace [ ]
Ident [inner]
ParenOpen [(]
Ident [n]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
Ident [n]
HSpace [ ]
Plus [+]
HSpace [ ]
Int [1]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [n]
HSpace [ ]
Minus [-]
HSpace [ ]
ParenOpen [(]
If [if]
HSpace [ ]
Ident [n]
HSpace [ ]
LessThan [<]
HSpace [ ]
Int [0]
HSpace [ ]
Then [then]
HSpace [ ]
Ident [inner]
ParenOpen [(]
Ident [n]
ParenClose [)]
HSpace [ ]
Else [else]
HSpace [ ]
Ident [outer]
ParenOpen [(]
Ident [n]
ParenClose [)]
ParenClose [)]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [min]
ParenOpen [(]
Ident [value]
Comma [,]
HSpace [ ]
Ident [min]
ParenClose [)]
HSpace [ ]
Ident [any]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
If [if]
HSpace [ ]
Ident [value]
HSpace [ ]
LessThan [<]
HSpace [ ]
Ident [min]
HSpace [ ]
Then [then]
HSpace [ ]
Ident [min]
HSpace [ ]
Else [else]
HSpace [ ]
Ident [value]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [max]
ParenOpen [(]
Ident [value]
Comma [,]
HSpace [ ]
Ident [max]
ParenClose [)]
HSpace [ ]
Ident [any]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
If [if]
HSpace [ ]
Ident [value]
HSpace [ ]
GreaterThan [>]
HSpace [ ]
Ident [max]
HSpace [ ]
Then [then]
HSpace [ ]
Ident [max]
HSpace [ ]
Else [else]
HSpace [ ]
Ident [value]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [clamp]
ParenOpen [(]
Ident [value]
Comma [,]
HSpace [ ]
Ident [min]
Comma [,]
HSpace [ ]
Ident [max]
ParenClose [)]
HSpace [ ]
Ident [any]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
If [if]
HSpace [ ]
Ident [value]
HSpace [ ]
LessThan [<]
HSpace [ ]
Ident [min]
HSpace [ ]
Then [then]
VSpace [\n]
HSpace [        ]
Ident [min]
VSpace [\n]
HSpace [    ]
Else [else]
HSpace [ ]
If [if]
HSpace [ ]
Ident [value]
HSpace [ ]
GreaterThan [>]
HSpace [ ]
Ident [max]
HSpace [ ]
Then [then]
VSpace [\n]
HSpace [        ]
Ident [max]
VSpace [\n]
HSpace [    ]
Else [else]
VSpace [\n]
HSpace [        ]
Ident [value]
VSpace [\n]
BraceClose [}]
VSpace [\n]

Debug: Module {
    name: "",
    constants: [
        (
            "main",
            Unkown,
            Function {
                params: [],
                named_params: {},
                return_type: Unit,
                body: Block(
                    [
                        Expr(
                            Call(
                                Ident("test_fib"),
                                [
                                    Literal(String: "fib_if"),
                                    Ident("fib_if"),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("test_countdown"),
                                [],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("test_fake_loops"),
                                [],
                            ),
                        ),
                    ],
                ),
            },
        ),
        (
            "fib_if",
            Unkown,
            Function {
                params: [
                    (
                        "n",
                        Path(
                            Path(["Int"]),
                        ),
                    ),
                ],
                named_params: {},
                return_type: Path(
                    Path(["Uint"]),
                ),
                body: IfElse(
                    LessThanEq(
                        Ident("n"),
                        Literal(Int: 0),
                    ),
                    Literal(Int: 0),
                    IfElse(
                        Eq(
                            Ident("n"),
                            Literal(Int: 1),
                        ),
                        Literal(Int: 1),
                        Add(
                            Call(
                                Ident("fib_if"),
                                [
                                    Sub(
                                        Ident("n"),
                                        Literal(Int: 1),
                                    ),
                                ],
                            ),
                            Call(
                                Ident("fib_if"),
                                [
                                    Sub(
                                        Ident("n"),
                                        Literal(Int: 2),
                                    ),
                                ],
                            ),
                        ),
                    ),
                ),
            },
        ),
        (
            "test_fib",
            Unkown,
            Function {
                params: [
                    (
                        "name",
                        Unkown,
                    ),
                    (
                        "fib",
                        Unkown,
                    ),
                ],
                named_params: {},
                return_type: Unit,
                body: Block(
                    [
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 0),
                                        ],
                                    ),
                                    Literal(Int: 0),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 1),
                                        ],
                                    ),
                                    Literal(Int: 1),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 2),
                                        ],
                                    ),
                                    Literal(Int: 1),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 3),
                                        ],
                                    ),
                                    Literal(Int: 2),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 4),
                                        ],
                                    ),
                                    Literal(Int: 3),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 5),
                                        ],
                                    ),
                                    Literal(Int: 5),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 6),
                                        ],
                                    ),
                                    Literal(Int: 8),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 7),
                                        ],
                                    ),
                                    Literal(Int: 13),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 8),
                                        ],
                                    ),
                                    Literal(Int: 21),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 9),
                                        ],
                                    ),
                                    Literal(Int: 34),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 10),
                                        ],
                                    ),
                                    Literal(Int: 55),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Call(
                                        Ident("fib"),
                                        [
                                            Literal(Int: 20),
                                        ],
                                    ),
                                    Literal(Int: 6765),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("println"),
                                [
                                    Literal(String: "Successfully tested "),
                                    Ident("name"),
                                    Literal(String: "!"),
                                ],
                            ),
                        ),
                    ],
                ),
            },
        ),
        (
            "countdown",
            Unkown,
            Function {
                params: [
                    (
                        "n",
                        Unkown,
                    ),
                    (
                        "step",
                        Unkown,
                    ),
                ],
                named_params: {},
                return_type: Unit,
                body: Block(
                    [
                        Expr(
                            Call(
                                Ident("print"),
                                [
                                    Ident("n"),
                                    Literal(String: " "),
                                ],
                            ),
                        ),
                        Expr(
                            IfElse(
                                GreaterThan(
                                    Ident("n"),
                                    Literal(Int: 0),
                                ),
                                Call(
                                    Ident("countdown"),
                                    [
                                        Call(
                                            Ident("min"),
                                            [
                                                Sub(
                                                    Ident("n"),
                                                    Ident("step"),
                                                ),
                                                Literal(Int: 0),
                                            ],
                                        ),
                                        Ident("step"),
                                    ],
                                ),
                                Unit,
                            ),
                        ),
                    ],
                ),
            },
        ),
        (
            "test_countdown",
            Unkown,
            Function {
                params: [],
                named_params: {},
                return_type: Unit,
                body: Block(
                    [
                        Expr(
                            Call(
                                Ident("countdown"),
                                [
                                    Literal(Int: 0),
                                    Literal(Int: 5),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("println"),
                                [],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("countdown"),
                                [
                                    Literal(Int: 1),
                                    Literal(Int: 1),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("println"),
                                [],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("countdown"),
                                [
                                    Literal(Int: 10),
                                    Literal(Int: 1),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("println"),
                                [],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("countdown"),
                                [
                                    Literal(Int: 100),
                                    Literal(Int: 8),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("println"),
                                [],
                            ),
                        ),
                    ],
                ),
            },
        ),
        (
            "test_fake_loops",
            Unkown,
            Function {
                params: [],
                named_params: {},
                return_type: Unit,
                body: Block(
                    [
                        Variable(
                            Const,
                            "while_do",
                            Unkown,
                            Function {
                                params: [
                                    (
                                        "i",
                                        Path(
                                            Path(["Int"]),
                                        ),
                                    ),
                                    (
                                        "increment",
                                        Unkown,
                                    ),
                                    (
                                        "condition",
                                        Unkown,
                                    ),
                                    (
                                        "body",
                                        Unkown,
                                    ),
                                ],
                                named_params: {},
                                return_type: Unit,
                                body: Block(
                                    [
                                        Expr(
                                            IfElse(
                                                Not(
                                                    Call(
                                                        Ident("condition"),
                                                        [
                                                            Ident("i"),
                                                        ],
                                                    ),
                                                ),
                                                Return(
                                                    Unit,
                                                ),
                                                Unit,
                                            ),
                                        ),
                                        Expr(
                                            Call(
                                                Ident("body"),
                                                [
                                                    Ident("i"),
                                                ],
                                            ),
                                        ),
                                        Expr(
                                            Call(
                                                Ident("while_do"),
                                                [
                                                    Call(
                                                        Ident("increment"),
                                                        [
                                                            Ident("i"),
                                                        ],
                                                    ),
                                                    Ident("increment"),
                                                    Ident("condition"),
                                                    Ident("body"),
                                                ],
                                            ),
                                        ),
                                    ],
                                ),
                            },
                        ),
                        Expr(
                            Call(
                                Ident("while_do"),
                                [
                                    Literal(Int: 0),
                                    Function {
                                        params: [
                                            (
                                                "i",
                                                Unkown,
                                            ),
                                        ],
                                        named_params: {},
                                        return_type: Unkown,
                                        body: Add(
                                            Ident("i"),
                                            Literal(Int: 2),
                                        ),
                                    },
                                    Function {
                                        params: [
                                            (
                                                "i",
                                                Unkown,
                                            ),
                                        ],
                                        named_params: {},
                                        return_type: Unkown,
                                        body: LessThan(
                                            Ident("i"),
                                            Literal(Int: 10),
                                        ),
                                    },
                                    Function {
                                        params: [
                                            (
                                                "i",
                                                Unkown,
                                            ),
                                        ],
                                        named_params: {},
                                        return_type: Unkown,
                                        body: Call(
                                            Ident("println"),
                                            [
                                                Literal(String: "i = "),
                                                Ident("i"),
                                            ],
                                        ),
                                    },
                                ],
                            ),
                        ),
                    ],
                ),
            },
        ),
        (
            "outer",
            Unkown,
            Function {
                params: [
                    (
                        "n",
                        Unkown,
                    ),
                ],
                named_params: {},
                return_type: Unit,
                body: Block(
                    [
                        Variable(
                            Const,
                            "inner",
                            Unkown,
                            Function {
                                params: [
                                    (
                                        "n",
                                        Unkown,
                                    ),
                                ],
                                named_params: {},
                                return_type: Unit,
                                body: Add(
                                    Ident("n"),
                                    Literal(Int: 1),
                                ),
                            },
                        ),
                        Expr(
                            Break(
                                Sub(
                                    Ident("n"),
                                    IfElse(
                                        LessThan(
                                            Ident("n"),
                                            Literal(Int: 0),
                                        ),
                                        Call(
                                            Ident("inner"),
                                            [
                                                Ident("n"),
                                            ],
                                        ),
                                        Call(
                                            Ident("outer"),
                                            [
                                                Ident("n"),
                                            ],
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ],
                ),
            },
        ),
        (
            "min",
            Unkown,
            Function {
                params: [
                    (
                        "value",
                        Unkown,
                    ),
                    (
                        "min",
                        Unkown,
                    ),
                ],
                named_params: {},
                return_type: Path(
                    Path(["any"]),
                ),
                body: Block(
                    [
                        Expr(
                            Break(
                                IfElse(
                                    LessThan(
                                        Ident("value"),
                                        Ident("min"),
                                    ),
                                    Ident("min"),
                                    Ident("value"),
                                ),
                            ),
                        ),
                    ],
                ),
            },
        ),
        (
            "max",
            Unkown,
            Function {
                params: [
                    (
                        "value",
                        Unkown,
                    ),
                    (
                        "max",
                        Unkown,
                    ),
                ],
                named_params: {},
                return_type: Path(
                    Path(["any"]),
                ),
                body: Block(
                    [
                        Expr(
                            Break(
                                IfElse(
                                    GreaterThan(
                                        Ident("value"),
                                        Ident("max"),
                                    ),
                                    Ident("max"),
                                    Ident("value"),
                                ),
                            ),
                        ),
                    ],
                ),
            },
        ),
        (
            "clamp",
            Unkown,
            Function {
                params: [
                    (
                        "value",
                        Unkown,
                    ),
                    (
                        "min",
                        Unkown,
                    ),
                    (
                        "max",
                        Unkown,
                    ),
                ],
                named_params: {},
                return_type: Path(
                    Path(["any"]),
                ),
                body: Block(
                    [
                        Expr(
                            Break(
                                IfElse(
                                    LessThan(
                                        Ident("value"),
                                        Ident("min"),
                                    ),
                                    Ident("min"),
                                    IfElse(
                                        GreaterThan(
                                            Ident("value"),
                                            Ident("max"),
                                        ),
                                        Ident("max"),
                                        Ident("value"),
                                    ),
                                ),
                            ),
                        ),
                    ],
                ),
            },
        ),
    ],
    types: [],
    sub_modules: [],
}



