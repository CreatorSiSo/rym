---
source: crates/rymx/tests/full.rs
expression: diag.outputs_dump() + &diag.reports_dump()
input_file: crates/rymx/tests/recursion.rym
---
--- tokenize ---
Const [const]
HSpace [ ]
Ident [main]
HSpace [ ]
Assign [=]
HSpace [ ]
Fn [fn]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [test_fib]
ParenOpen [(]
String [\"fib_if\"]
Comma [,]
HSpace [ ]
Ident [fib_if]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Comment [// test_fib(\"fib_match\", fib_match);]
VSpace [\n]
HSpace [    ]
Comment [// test_fib(\"fib_oneliner\", fib_oneliner);]
VSpace [\n\n]
HSpace [    ]
Ident [test_countdown]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
Semi [;]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [fib_if]
HSpace [ ]
Assign [=]
HSpace [ ]
Fn [fn]
ParenOpen [(]
Ident [n]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
VSpace [\n]
HSpace [    ]
If [if]
HSpace [ ]
Ident [n]
HSpace [ ]
Eq [==]
HSpace [ ]
Int [0]
HSpace [ ]
Then [then]
HSpace [ ]
Int [0]
VSpace [\n]
HSpace [    ]
Else [else]
HSpace [ ]
If [if]
HSpace [ ]
Ident [n]
HSpace [ ]
Eq [==]
HSpace [ ]
Int [1]
HSpace [ ]
Then [then]
HSpace [ ]
Int [1]
VSpace [\n]
HSpace [    ]
Else [else]
HSpace [ ]
Ident [fib_if]
ParenOpen [(]
Ident [n]
HSpace [ ]
Minus [-]
HSpace [ ]
Int [1]
ParenClose [)]
HSpace [ ]
Plus [+]
HSpace [ ]
Ident [fib_if]
ParenOpen [(]
Ident [n]
HSpace [ ]
Minus [-]
HSpace [ ]
Int [2]
ParenClose [)]
Semi [;]
VSpace [\n\n]
Comment [// const fib_match = fn(n) => match n with]
VSpace [\n]
Comment [//     | 0 => 0]
VSpace [\n]
Comment [//     | 1 => 1]
VSpace [\n]
Comment [//     | _ => fib_match(n - 1) + fib_match(n - 2);]
VSpace [\n\n]
Comment [// const fib_oneliner = fn(n) => match n with 0 => 0 | 1 => 1 | _ => fib_oneliner(n - 1) + fib_oneliner(n - 2);]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [test_fib]
HSpace [ ]
Assign [=]
HSpace [ ]
Fn [fn]
ParenOpen [(]
Ident [name]
Comma [,]
HSpace [ ]
Ident [fib]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [0]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [1]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [2]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [3]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [2]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [4]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [3]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [5]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [5]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [6]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [8]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [7]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [13]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [8]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [21]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [9]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [34]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [10]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [55]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [fib]
ParenOpen [(]
Int [20]
ParenClose [)]
Comma [,]
HSpace [ ]
Int [6765]
ParenClose [)]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Ident [println]
ParenOpen [(]
String [\"Successfully tested \"]
Comma [,]
HSpace [ ]
Ident [name]
Comma [,]
HSpace [ ]
String [\"!\"]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
Semi [;]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [countdown]
HSpace [ ]
Assign [=]
HSpace [ ]
Fn [fn]
ParenOpen [(]
Ident [n]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [print]
ParenOpen [(]
Ident [n]
Comma [,]
HSpace [ ]
String [\" \"]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
If [if]
HSpace [ ]
Ident [n]
HSpace [ ]
NotEq [!=]
HSpace [ ]
Int [0]
HSpace [ ]
Then [then]
HSpace [ ]
Ident [countdown]
ParenOpen [(]
Ident [n]
HSpace [ ]
Minus [-]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
Semi [;]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [test_countdown]
HSpace [ ]
Assign [=]
HSpace [ ]
Fn [fn]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Ident [countdown]
ParenOpen [(]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [println]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [countdown]
ParenOpen [(]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [println]
ParenOpen [(]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [countdown]
ParenOpen [(]
Int [10]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
Semi [;]
VSpace [\n]

--- parse ---
Module {
    name: "",
    constants: [
        (
            "main",
            Function {
                params: [],
                body: Block(
                    [
                        Call(
                            Ident("test_fib"),
                            [
                                Literal(String fib_if),
                                Ident("fib_if"),
                            ],
                        ),
                        Call(
                            Ident("test_countdown"),
                            [],
                        ),
                    ],
                ),
            },
        ),
        (
            "fib_if",
            Function {
                params: [
                    (
                        "n",
                        (),
                    ),
                ],
                body: IfElse(
                    Eq(
                        Ident("n"),
                        Literal(Int 0),
                    ),
                    Literal(Int 0),
                    IfElse(
                        Eq(
                            Ident("n"),
                            Literal(Int 1),
                        ),
                        Literal(Int 1),
                        Add(
                            Call(
                                Ident("fib_if"),
                                [
                                    Sub(
                                        Ident("n"),
                                        Literal(Int 1),
                                    ),
                                ],
                            ),
                            Call(
                                Ident("fib_if"),
                                [
                                    Sub(
                                        Ident("n"),
                                        Literal(Int 2),
                                    ),
                                ],
                            ),
                        ),
                    ),
                ),
            },
        ),
        (
            "test_fib",
            Function {
                params: [
                    (
                        "name",
                        (),
                    ),
                    (
                        "fib",
                        (),
                    ),
                ],
                body: Block(
                    [
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 0),
                                    ],
                                ),
                                Literal(Int 0),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 1),
                                    ],
                                ),
                                Literal(Int 1),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 2),
                                    ],
                                ),
                                Literal(Int 1),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 3),
                                    ],
                                ),
                                Literal(Int 2),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 4),
                                    ],
                                ),
                                Literal(Int 3),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 5),
                                    ],
                                ),
                                Literal(Int 5),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 6),
                                    ],
                                ),
                                Literal(Int 8),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 7),
                                    ],
                                ),
                                Literal(Int 13),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 8),
                                    ],
                                ),
                                Literal(Int 21),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 9),
                                    ],
                                ),
                                Literal(Int 34),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 10),
                                    ],
                                ),
                                Literal(Int 55),
                            ],
                        ),
                        Call(
                            Ident("assert_eq"),
                            [
                                Call(
                                    Ident("fib"),
                                    [
                                        Literal(Int 20),
                                    ],
                                ),
                                Literal(Int 6765),
                            ],
                        ),
                        Call(
                            Ident("println"),
                            [
                                Literal(String Successfully tested ),
                                Ident("name"),
                                Literal(String !),
                            ],
                        ),
                    ],
                ),
            },
        ),
        (
            "countdown",
            Function {
                params: [
                    (
                        "n",
                        (),
                    ),
                ],
                body: Block(
                    [
                        Call(
                            Ident("print"),
                            [
                                Ident("n"),
                                Literal(String  ),
                            ],
                        ),
                        IfElse(
                            NotEq(
                                Ident("n"),
                                Literal(Int 0),
                            ),
                            Call(
                                Ident("countdown"),
                                [
                                    Sub(
                                        Ident("n"),
                                        Literal(Int 1),
                                    ),
                                ],
                            ),
                            Unit,
                        ),
                    ],
                ),
            },
        ),
        (
            "test_countdown",
            Function {
                params: [],
                body: Block(
                    [
                        Call(
                            Ident("countdown"),
                            [
                                Literal(Int 0),
                            ],
                        ),
                        Call(
                            Ident("println"),
                            [],
                        ),
                        Call(
                            Ident("countdown"),
                            [
                                Literal(Int 1),
                            ],
                        ),
                        Call(
                            Ident("println"),
                            [],
                        ),
                        Call(
                            Ident("countdown"),
                            [
                                Literal(Int 10),
                            ],
                        ),
                    ],
                ),
            },
        ),
    ],
    children: [],
}

--- interpret ---
const assert = fn<native> (1)
const assert_eq = fn<native> (2)
const countdown = fn (1)
const fib_if = fn (1)
const fib_native = fn<native> (1)
const main = fn (0)
const print = fn<native> (variadic)
const println = fn<native> (variadic)
const read_to_string = fn<native> (1)
const test_countdown = fn (0)
const test_fib = fn (2)

--- reports ---

