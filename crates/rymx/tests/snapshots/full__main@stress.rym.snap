---
source: crates/rymx/tests/full.rs
expression: "String::from_utf8(out).unwrap()"
input_file: crates/rymx/tests/stress.rym
---
Debug: Finished tokenizing
Fn [fn]
HSpace [ ]
Ident [main]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Comment [// assert_eq(ones, 304);]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Comment [// // TODO Fix stack overflow]
VSpace [\n]
Comment [// const ones = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [pi]
HSpace [ ]
Assign [=]
HSpace [ ]
Float [3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282]
Semi [;]
VSpace [\n\n]
Fn [fn]
HSpace [ ]
Ident [create_death_chain]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
Ident [chain]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
ParenOpen [(]
Ident [pi]
HSpace [ ]
Minus [-]
HSpace [ ]
ParenOpen [(]
Minus [-]
Int [1]
HSpace [ ]
Star [*]
HSpace [ ]
Ident [pi]
ParenClose [)]
Dot [.]
Ident [abs]
ParenOpen [(]
ParenClose [)]
ParenClose [)]
VSpace [\n]
HSpace [        ]
Dot [.]
Ident [try]
VSpace [\n]
HSpace [        ]
Dot [.]
Ident [test_with_values]
ParenOpen [(]
Int [0]
Comma [,]
HSpace [ ]
Int [1]
Comma [,]
HSpace [ ]
Int [2]
Comma [,]
HSpace [ ]
String [\"Hello World!\"]
ParenClose [)]
VSpace [\n]
HSpace [        ]
Dot [.]
Ident [make_new]
ParenOpen [(]
Int [2]
Comma [,]
HSpace [ ]
Int [2]
ParenClose [)]
VSpace [\n]
BraceClose [}]
VSpace [\n]

Debug: Finished parsing
Some(
    Module {
        name: "",
        constants: [
            (
                "main",
                Unkown,
                Function {
                    params: [],
                    named_params: {},
                    return_type: Unit,
                    body: Block(
                        [],
                    ),
                },
            ),
            (
                "pi",
                Unkown,
                Literal(Float: 3.141592653589793),
            ),
            (
                "create_death_chain",
                Unkown,
                Function {
                    params: [],
                    named_params: {},
                    return_type: Path(
                        Path(["chain"]),
                    ),
                    body: Block(
                        [
                            Expr(
                                Break(
                                    Call(
                                        FieldAccess(
                                            Call(
                                                FieldAccess(
                                                    FieldAccess(
                                                        Sub(
                                                            Ident("pi"),
                                                            Call(
                                                                FieldAccess(
                                                                    Mul(
                                                                        Neg(
                                                                            Literal(Int: 1),
                                                                        ),
                                                                        Ident("pi"),
                                                                    ),
                                                                    "abs",
                                                                ),
                                                                [],
                                                            ),
                                                        ),
                                                        "try",
                                                    ),
                                                    "test_with_values",
                                                ),
                                                [
                                                    Literal(Int: 0),
                                                    Literal(Int: 1),
                                                    Literal(Int: 2),
                                                    Literal(String: "Hello World!"),
                                                ],
                                            ),
                                            "make_new",
                                        ),
                                        [
                                            Literal(Int: 2),
                                            Literal(Int: 2),
                                        ],
                                    ),
                                ),
                            ),
                        ],
                    ),
                },
            ),
        ],
        types: [],
        sub_modules: [],
    },
)


