---
source: crates/rymx/tests/full.rs
expression: diag.outputs_dump() + &diag.reports_dump()
input_file: crates/rymx/tests/types.rym
---
--- tokenize ---
Const [const]
HSpace [ ]
Ident [u1_min]
Colon [:]
HSpace [ ]
Ident [u1]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [u1_max]
Colon [:]
HSpace [ ]
Ident [u1]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [1]
Semi [;]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [u8_min]
Colon [:]
HSpace [ ]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [u8_max]
Colon [:]
HSpace [ ]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [255]
Semi [;]
VSpace [\n\n]
Comment [// TODO ...]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [array_test]
HSpace [ ]
Assign [=]
HSpace [ ]
Fn [fn]
ParenOpen [(]
ParenClose [)]
HSpace [ ]
ThickArrow [=>]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
Comment [// test \"arrays\" {]
VSpace [\n]
HSpace [    ]
Let [let]
HSpace [ ]
Ident [zeroed]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [_]
BracketClose []]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
BracketOpen [[]
Int [0]
Semi [;]
HSpace [ ]
Int [512]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [    ]
Comment [// TODO allow type expressions in place of normal expressions?]
VSpace [\n]
HSpace [    ]
Comment [// assert_eq(type_of(zeroed), [512]u8);]
VSpace [\n\n]
HSpace [    ]
Let [let]
HSpace [ ]
Ident [initialized]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [_]
BracketClose []]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
BracketOpen [[]
Int [1]
Comma [,]
HSpace [ ]
Int [0]
Comma [,]
HSpace [ ]
Int [0]
Comma [,]
HSpace [ ]
Int [255]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [    ]
Comment [// assert_eq(type_of(initialized), [4]u8);]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [0]
BracketClose []]
Comma [,]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [1]
BracketClose []]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [2]
BracketClose []]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [3]
BracketClose []]
Comma [,]
HSpace [ ]
Int [255]
ParenClose [)]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [mutable]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [_]
BracketClose []]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
BracketOpen [[]
Int [0]
Semi [;]
HSpace [ ]
Int [5]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [0]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [1]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [1]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [2]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [2]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [3]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [3]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [4]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [4]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [5]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [mutable]
Comma [,]
HSpace [ ]
BracketOpen [[]
Int [1]
Comma [,]
HSpace [ ]
Int [2]
Comma [,]
HSpace [ ]
Int [3]
Comma [,]
HSpace [ ]
Int [4]
Comma [,]
HSpace [ ]
Int [5]
BracketClose []]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
Semi [;]
VSpace [\n\n]
Comment [// TODO Slices]
VSpace [\n]

--- parse ---
Module {
    name: "",
    constants: [
        (
            "u1_min",
            Path(
                Path {
                    parts: [
                        "u1",
                    ],
                },
            ),
            Literal(Int: 0),
        ),
        (
            "u1_max",
            Path(
                Path {
                    parts: [
                        "u1",
                    ],
                },
            ),
            Literal(Int: 1),
        ),
        (
            "u8_min",
            Path(
                Path {
                    parts: [
                        "u8",
                    ],
                },
            ),
            Literal(Int: 0),
        ),
        (
            "u8_max",
            Path(
                Path {
                    parts: [
                        "u8",
                    ],
                },
            ),
            Literal(Int: 255),
        ),
        (
            "array_test",
            Unkown,
            Function {
                name: None,
                params: [],
                return_type: Unkown,
                body: Block(
                    [
                        Variable(
                            Let,
                            "zeroed",
                            Array(
                                Some(
                                    Path(
                                        Path {
                                            parts: [
                                                "_",
                                            ],
                                        },
                                    ),
                                ),
                                Path(
                                    Path {
                                        parts: [
                                            "u8",
                                        ],
                                    },
                                ),
                            ),
                            ArrayWithRepeat(
                                Literal(Int: 0),
                                Literal(Int: 512),
                            ),
                        ),
                        Variable(
                            Let,
                            "initialized",
                            Array(
                                Some(
                                    Path(
                                        Path {
                                            parts: [
                                                "_",
                                            ],
                                        },
                                    ),
                                ),
                                Path(
                                    Path {
                                        parts: [
                                            "u8",
                                        ],
                                    },
                                ),
                            ),
                            Array([Literal(Int: 1), Literal(Int: 0), Literal(Int: 0), Literal(Int: 255)]),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Subscript(
                                        Ident("initialized"),
                                        Literal(Int: 0),
                                    ),
                                    Literal(Int: 1),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Subscript(
                                        Ident("initialized"),
                                        Literal(Int: 1),
                                    ),
                                    Literal(Int: 0),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Subscript(
                                        Ident("initialized"),
                                        Literal(Int: 2),
                                    ),
                                    Literal(Int: 0),
                                ],
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Subscript(
                                        Ident("initialized"),
                                        Literal(Int: 3),
                                    ),
                                    Literal(Int: 255),
                                ],
                            ),
                        ),
                        Variable(
                            LetMut,
                            "mutable",
                            Array(
                                Some(
                                    Path(
                                        Path {
                                            parts: [
                                                "_",
                                            ],
                                        },
                                    ),
                                ),
                                Path(
                                    Path {
                                        parts: [
                                            "u8",
                                        ],
                                    },
                                ),
                            ),
                            ArrayWithRepeat(
                                Literal(Int: 0),
                                Literal(Int: 5),
                            ),
                        ),
                        Expr(
                            Assign(
                                Subscript(
                                    Ident("initialized"),
                                    Literal(Int: 0),
                                ),
                                Literal(Int: 1),
                            ),
                        ),
                        Expr(
                            Assign(
                                Subscript(
                                    Ident("initialized"),
                                    Literal(Int: 1),
                                ),
                                Literal(Int: 2),
                            ),
                        ),
                        Expr(
                            Assign(
                                Subscript(
                                    Ident("initialized"),
                                    Literal(Int: 2),
                                ),
                                Literal(Int: 3),
                            ),
                        ),
                        Expr(
                            Assign(
                                Subscript(
                                    Ident("initialized"),
                                    Literal(Int: 3),
                                ),
                                Literal(Int: 4),
                            ),
                        ),
                        Expr(
                            Assign(
                                Subscript(
                                    Ident("initialized"),
                                    Literal(Int: 4),
                                ),
                                Literal(Int: 5),
                            ),
                        ),
                        Expr(
                            Call(
                                Ident("assert_eq"),
                                [
                                    Ident("mutable"),
                                    Array([Literal(Int: 1), Literal(Int: 2), Literal(Int: 3), Literal(Int: 4), Literal(Int: 5)]),
                                ],
                            ),
                        ),
                    ],
                ),
            },
        ),
    ],
    types: [],
    sub_modules: [],
}

--- interpret ---
const array_test = fn (0)
const assert = fn<native> (1)
const assert_eq = fn<native> (2)
const false = false
const fib_native = fn<native> (1)
const print = fn<native> (variadic)
const println = fn<native> (variadic)
const read_to_string = fn<native> (1)
const true = true
const u1_max = 1
const u1_min = 0
const u8_max = 255
const u8_min = 0

--- reports ---

