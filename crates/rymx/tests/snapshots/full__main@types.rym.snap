---
source: crates/rymx/tests/full.rs
expression: diag.outputs_dump() + &diag.reports_dump()
input_file: crates/rymx/tests/types.rym
---
--- tokenize ---
Const [const]
HSpace [ ]
Ident [u1_min]
Colon [:]
HSpace [ ]
Ident [u1]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [u1_max]
Colon [:]
HSpace [ ]
Ident [u1]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [1]
Semi [;]
VSpace [\n\n]
Const [const]
HSpace [ ]
Ident [u8_min]
Colon [:]
HSpace [ ]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [0]
Semi [;]
VSpace [\n]
Const [const]
HSpace [ ]
Ident [u8_max]
Colon [:]
HSpace [ ]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [255]
Semi [;]
VSpace [\n\n]
Comment [// TODO ...]
VSpace [\n\n]
Ident [test]
HSpace [ ]
String [\"arrays\"]
HSpace [ ]
BraceOpen [{]
VSpace [\n]
HSpace [    ]
Let [let]
HSpace [ ]
Ident [zeroed]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [_]
BracketClose []]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
BracketOpen [[]
Int [0]
Semi [;]
HSpace [ ]
Int [512]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Error [@]
Ident [type_of]
ParenOpen [(]
Ident [zeroed]
ParenClose [)]
Comma [,]
HSpace [ ]
BracketOpen [[]
Int [512]
BracketClose []]
Ident [u8]
ParenClose [)]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Let [let]
HSpace [ ]
Ident [initialized]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [_]
BracketClose []]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
BracketOpen [[]
Int [1]
Comma [,]
HSpace [ ]
Int [0]
Comma [,]
HSpace [ ]
Int [0]
Comma [,]
HSpace [ ]
Int [255]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Error [@]
Ident [type_of]
ParenOpen [(]
Ident [initialized]
ParenClose [)]
Comma [,]
HSpace [ ]
BracketOpen [[]
Int [4]
BracketClose []]
Ident [u8]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [0]
BracketClose []]
Comma [,]
HSpace [ ]
Int [1]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [1]
BracketClose []]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [2]
BracketClose []]
Comma [,]
HSpace [ ]
Int [0]
ParenClose [)]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [3]
BracketClose []]
Comma [,]
HSpace [ ]
Int [255]
ParenClose [)]
Semi [;]
VSpace [\n\n]
HSpace [    ]
Let [let]
HSpace [ ]
Mut [mut]
HSpace [ ]
Ident [mutable]
Colon [:]
HSpace [ ]
BracketOpen [[]
Ident [_]
BracketClose []]
Ident [u8]
HSpace [ ]
Assign [=]
HSpace [ ]
BracketOpen [[]
Int [0]
Semi [;]
HSpace [ ]
Int [5]
BracketClose []]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [0]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [1]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [1]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [2]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [2]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [3]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [3]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [4]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [initialized]
Dot [.]
BracketOpen [[]
Int [4]
BracketClose []]
HSpace [ ]
Assign [=]
HSpace [ ]
Int [5]
Semi [;]
VSpace [\n]
HSpace [    ]
Ident [assert_eq]
ParenOpen [(]
Ident [mutable]
Comma [,]
HSpace [ ]
BracketOpen [[]
Int [1]
Comma [,]
HSpace [ ]
Int [2]
Comma [,]
HSpace [ ]
Int [3]
Comma [,]
HSpace [ ]
Int [4]
Comma [,]
HSpace [ ]
Int [5]
BracketClose []]
ParenClose [)]
Semi [;]
VSpace [\n]
BraceClose [}]
VSpace [\n\n]
Comment [// TODO Slices]
VSpace [\n]

--- reports ---
Error: 
    ╭─[/home/simon/dev/rym/crates/rymx/tests/types.rym:11:15]
    │
 11 │     assert_eq(@type_of(zeroed), [512]u8);
    │               ┬  
    │               ╰── Invalid character [@]
────╯

